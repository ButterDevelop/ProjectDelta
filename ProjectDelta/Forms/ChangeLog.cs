using ProjectDelta.Tools;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using System.Windows.Forms;

namespace ProjectDelta.Forms
{
    public partial class ChangeLog : Form
    {
        private static bool ServerCertificateValidationCallback(object sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
        {
            if (certificate.GetRawCertDataStringreturn true; else return false;
        }

        public ChangeLog()
        {
            InitializeComponent();

            AfterLoad();
        }

        private void AfterLoad()
        {
            string html = "";
            string url = B64X.Encrypt("http://a116901.hostde27.fornex.host/delta/license/ChangeLog.txt");
            //if (Translate.local == "English") url = B64X.Encrypt("http://a116901.hostde27.fornex.host/delta/license/ChangeLog_en.html");
            try
            {
                HttpWebRequest requesttimereal = (HttpWebRequest)WebRequest.Create(B64X.Decrypt(url));
                requesttimereal.Method = "GET";
                requesttimereal.ServerCertificateValidationCallback += ServerCertificateValidationCallback;
                HttpWebResponse responze = (HttpWebResponse)requesttimereal.GetResponse();
                html = B64X.Encrypt(new StreamReader(responze.GetResponseStream()).ReadToEnd());
            }
            catch { }

            webBrowser.ScriptErrorsSuppressed = true;
            webBrowser.DocumentText = B64X.Decrypt(html);
        }

        private void buttonInstallUpdate_Click(object sender, EventArgs e)
        {
            try
            {
                Hide();

                DownloadAndInstall();
            } catch
            {
                MessageBox.Show("Unable to update the app!", "Error!", MessageBoxButtons.OK, MessageBoxIcon.Error);
                Close();
            }
        }

        private void buttonClose_Click(object sender, EventArgs e)
        {
            Close();
        }

        public static void DownloadAndInstall()
        {
            //Downloading...

            try
            {
                ServicePointManager.SecurityProtocol = SecurityProtocolType.Tls12;/* | SecurityProtocolType.Tls11 | SecurityProtocolType.Tls;*/
                using (var request = new xNet.HttpRequest())
                {
                    request.SslCertificateValidatorCallback += ServerCertificateValidationCallback;
                    request.IgnoreProtocolErrors = true;

                    xNet.HttpResponse response = request.Get("http://a116901.hostde27.fornex.host/delta/license/update.doc");
                    response.ToFile(Path.Combine(Environment.CurrentDirectory, "update.exe"));
                }

                //Install
                ProcessStartInfo startInfo = new ProcessStartInfo();
                startInfo.FileName = "cmd.exe";
                startInfo.Arguments = "/C ping -n 3 127.0.0.1>nul && \"" + Path.Combine(Environment.CurrentDirectory, "update.exe") + "\"";
                Process.Start(startInfo);

                Environment.Exit(0);
            } catch { }
        }
    }
}
